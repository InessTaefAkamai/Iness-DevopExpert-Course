pipeline {
    agent any

    environment {
        GIT_REPOSITORY = 'https://github.com/InessTaefAkamai/Iness-DevopExpert-Course.git'
        DOCKER_REGISTRY = 'docker.io/itaef'
        DOCKER_CREDENTIALS_ID = 'DOCKER_CREDENTIALS_ID'
        BASE_VERSION = '3.0.0'
    }

    stages {
        stage('Clone Repository') {
            steps {
                git url: "${GIT_REPOSITORY}", branch: 'main'
            }
        }
        stage('Determine New Version') {
            steps {
                script {
                    // Parse the base version and increment
                    def versionParts = BASE_VERSION.tokenize('.')
                    def patchVersion = versionParts[2].toInteger() + 1
                    def newVersion = "${versionParts[0]}.${versionParts[1]}.${patchVersion}"
                    env.NEW_VERSION = newVersion
                }
            }
        }
        stage('Build Docker Images') {
            steps {
                script {
                    // Build images with the new version tag
                    consumerImage = docker.build("${DOCKER_REGISTRY}/consumer:${NEW_VERSION}", "-f k8s-project/consumer/Dockerfile k8s-project/consumer")
                    producerImage = docker.build("${DOCKER_REGISTRY}/producer:${NEW_VERSION}", "-f k8s-project/producer/Dockerfile k8s-project/producer")
                }
            }
        }
        stage('Login to Docker Hub') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', DOCKER_CREDENTIALS_ID) {
                        echo 'Successfully logged in to Docker Hub'
                    }
                }
            }
        }
        stage('Push Docker Images') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', DOCKER_CREDENTIALS_ID) {
                        consumerImage.push("${NEW_VERSION}")
                        producerImage.push("${NEW_VERSION}")
                    }
                }
            }
        }
    }
    post {
        success {
            echo "Build and Push successful with version: ${NEW_VERSION}"
        }
        failure {
            echo 'Build or Push failed.'
        }
    }
}
